==============================================================================
*async*

This modules implements an asynchronous programming library for Neovim,
enabling developers to write non-blocking, coroutine-based code. Below is a
summary of its key features and components:

1. Async Contexts:
- Functions can run asynchronously using Lua coroutines.
- Async functions are annotated with `@async` and must run within an async context.

2. Task Management:
- Create be `async.run()`.
- Can be awaited, canceled, or waited synchronously.

3. Awaiting:
- |async.await()|: Allows blocking on asynchronous operations, such as
tasks or callback-based functions.
- Supports multiple overloads for tasks, task functions, and callback
functions.

4. Task Wrapping:
- |async.wrap()|: Converts any callback-based functions into async functions.

5. Concurrency Utilities:
- |async.iter()|: Iterates over multiple tasks, yielding their results as
they complete.
- |async.join()|: Waits for all tasks to complete and collects their
results.
- |async.joinany()|: Waits for the first task to complete and returns its
result.

6. Synchronization Primitives:
- |async.event()|: Implements an event signaling mechanism for tasks to
wait and notify.
- |async.queue()|: A thread-safe FIFO queue for producer-consumer patterns.
- |async.semaphore()|: Limits concurrent access to shared resources.

7. Error Handling:
- Errors in async tasks are propagated and can be raised or handled explicitly.
- Provides methods like |async.Task:traceback()| for debugging.

Examples:
>lua
   -- Create an async version of vim.system
   local system = vim.async.wrap(3, function(cmd, opts, cb)
     local obj = vim.system(cmd, opts, cb)
     obj.close = function(_, callback)
       if not obj:is_closing() then
         obj:wait(0)
         callback()
       end
     end
     return obj
   end)

   local sleep = vim.async.wrap(2, function(duration, callback)
     local timer = assert(vim.uv.new_timer())
     timer:start(duration, 0, callback)
     return timer -- timer has a close method
   end

   -- Create an async-context using run
   vim.async.run(function())
     local obj_ls = system({'ls'})
     sleep(200)
     local obj_cat = system({'cat file'})
   end)
<

                                                                *async-function*

Async functions are functions that must run in an |async-context| because
they contain at least one call that interacts with the event loop.

These functions can be executed directly using `async.run()` or wrapped
into Task functions via `async.async()`. Both methods ensure the async
function runs within an |async-context|.

Use the `@async` annotation to designate a function as an async function.

                                                                 *async-context*

An async-context is an executation context managed by `vim.async` and is
implemented via |lua-coroutine|s. Many of the functions and methods in
`vim.async` can only run when within this context.

                                                          *async-error-handling*

Errors are handled differently depending on whether a function is called in
a blocking or non-blocking manner.

If a function is waited in a blocking call (via |async.await()| or |async.Task:wait()|),
errors are raised immediately.

If a function is waited in a non-blocking way (via |async.Task:wait()|),
errors are passed as part of the result in the form of `(err?, ...)`, where
`err` is the error message and `...` are the results of the function when
there is no error.

To run a Task without waiting for the result while still raising
any errors, use |async.Task:raise_on_error()|.

------------------------------------------------------------------------------
async.run({func}, {...})                                         *async.run()*

    Run a function in an async context, asynchronously.

    Returns an |async.Task| object which can be used to wait or await the result
    of the function.

    Examples:
    >lua
     -- Run a uv function and wait for it
     local stat = async.run(function()
         return async.await(2, vim.uv.fs_stat, 'foo.txt')
     end):wait()

     -- Since uv functions have sync versions, this is the same as:
     local stat = vim.fs_stat('foo.txt')
<

    Generics: ~
    - `T`, `R`

    Parameters: ~
    - {func} (`async fun(...: T ...) -> R ...`): Function to run in an async context
    - {...} (`T ...`): Arguments to pass to the function

    Returns: ~
    - (`Task<R>`)

------------------------------------------------------------------------------
async.await({...})                                             *async.await()*

    Asynchronous blocking wait

    Example:
    >lua
     local task = async.run(function()
        return 1, 'a'
     end)

     local task_fun = async.async(function(arg)
        return 2, 'b', arg
     end)

     async.run(function()
       do -- await a callback function
         async.await(1, vim.schedule)
       end

       do -- await a callback function (if function only has a callback argument)
         async.await(vim.schedule)
       end

       do -- await a task (new async context)
         local n, s = async.await(task)
         assert(n == 1 and s == 'a')
       end

       do -- await a started task function (new async context)
         local n, s, arg = async.await(task_fun('A'))
         assert(n == 2)
         assert(s == 'b')
         assert(args == 'A')
       end

       do -- await a task function (re-using the current async context)
         local n, s, arg = async.await(task_fun, 'B')
         assert(n == 2)
         assert(s == 'b')
         assert(args == 'B')
       end
     end)
<

    Attributes: ~
    - `async`

    Generics: ~
    - `T`, `R`

    Overloads: ~
    - `fun(func: fun(callback: fun(...: R ...)) -> async.Closable?) -> R ...`
    - `fun(argc: integer, func: fun(...: T ..., callback: fun(...: R ...)) -> async.Closable?, ...: T ...) -> R ...`
    - `fun(task: Task<R>) -> R ...`

    Parameters: ~
    - {...} (`any`): see overloads

    Returns: ~
    - (`any ...`)

------------------------------------------------------------------------------
async.wrap({argc}, {func})                                      *async.wrap()*

    Creates an async function with a callback style function.

    `func` can optionally return an object with a close method to clean up
    resources. Note this method will be called when the task finishes or
    interrupted.

    Example:

    >lua
     --- Note the callback argument is not present in the return function
     --- @type async fun(timeout: integer)
     local sleep = async.wrap(2, function(timeout, callback)
       local timer = vim.uv.new_timer()
       timer:start(timeout * 1000, 0, callback)
       -- uv_timer_t provides a close method so timer will be
       -- cleaned up when this function finishes
       return timer
     end)

     async.run(function()
       print('hello')
       sleep(2)
       print('world')
     end)
<

    Generics: ~
    - `T`, `R`

    Parameters: ~
    - {argc} (`integer`)
    - {func} (`fun(...: T, callback: fun(...: R)) -> async.Closable?`)

    Returns: ~
    - (`async fun(...: T) -> R`)

------------------------------------------------------------------------------
*async.schedule*
    Type: `async fun(...: T) -> R


    An async function that when called will yield to the Neovim scheduler to be
    able to call the API.


------------------------------------------------------------------------------
async.iter({tasks})                                             *async.iter()*

    Waits for multiple tasks to finish and iterates over their results.

    This function allows you to run multiple asynchronous tasks concurrently and
    process their results as they complete. It returns an iterator function that
    yields the index of the task, any error encountered, and the results of the task.

    If a task completes with an error, the error is returned as the second value.
    Otherwise, the results of the task are returned as subsequent values.

    Example:
    >lua
     local task1 = async.run(function()
       return 1, 'a'
     end)

     local task2 = async.run(function()
       return 2, 'b'
     end)

     local task3 = async.run(function()
       error('task3 error')
     end)

     async.run(function()
       for i, err, r1, r2 in async.iter({task1, task2, task3}) do
         print(i, err, r1, r2)
       end
     end)
<

    Prints:
<
     1 nil 1 'a'
     2 nil 2 'b'
     3 'task3 error' nil nil
<

    Attributes: ~
    - `async`

    Parameters: ~
    - {tasks} (`Task<any>[]`): A list of tasks to wait for and iterate over.

    Returns: ~
    - {iterator} (`async fun() -> (integer?,any,unknown)`): that yields the index, error, and results of each task.

------------------------------------------------------------------------------
async.join({tasks})                                             *async.join()*

    Wait for all tasks to finish and return their results.

    Example:
    >lua
     local task1 = async.run(function()
       return 1, 'a'
     end)

     local task2 = async.run(function()
       return 1, 'a'
     end)

     local task3 = async.run(function()
       error('task3 error')
     end)

     async.run(function()
       local results = async.join({task1, task2, task3})
       print(vim.inspect(results))
     end)
<

    Prints:
<
     {
       |1| = { nil, 1, 'a' },
       |2| = { nil, 2, 'b' },
       |3| = { 'task2 error' },
     }
<

    Attributes: ~
    - `async`

    Parameters: ~
    - {tasks} (`Task<any>[]`)

    Returns: ~
    - (`table<integer,unknown>`)

------------------------------------------------------------------------------
async.joinany({tasks})                                       *async.joinany()*
    Attributes: ~
    - `async`

    Parameters: ~
    - {tasks} (`Task<any>[]`)

    Returns: ~
    - {index} (`integer?`)
    - {err} (`any`)
    - {results} (`any ...`)

------------------------------------------------------------------------------
async.sleep({duration})                                        *async.sleep()*
    Attributes: ~
    - `async`

    Parameters: ~
    - {duration} (`integer`): ms


------------------------------------------------------------------------------
async.timeout({duration}, {task})                            *async.timeout()*

    Run a task with a timeout.

    If the task does not complete within the specified duration, it is cancelled
    and an error is thrown.

    Attributes: ~
    - `async`

    Generics: ~
    - `R`

    Parameters: ~
    - {duration} (`???`)
    - {task} (`Task<R>`)

    Returns: ~
    - (`R`)

------------------------------------------------------------------------------
async.future()                                                *async.future()*

    Create a new future

    Returns: ~
    - (`async.Future`) (See |async.Future|)

------------------------------------------------------------------------------
async.event()                                                  *async.event()*

    Create a new event

    An event can signal to multiple listeners to resume execution
    The event can be set from a non-async context.

    >lua
      local event = async.event()

      local worker = async.run(function()
        sleep(1000)
        event.set()
      end)

      local listeners = {
        async.run(function()
          event.wait()
          print("First listener notified")
        end),
        async.run(function()
          event.wait()
          print("Second listener notified")
        end),
      }
<

    Returns: ~
    - (`async.Event`) (See |async.Event|)

------------------------------------------------------------------------------
async.queue({max_size})                                        *async.queue()*

    Create a new FIFO queue with async support.
    >lua
      local queue = async.queue()

      local producer = async.run(function()
        for i = 1, 10 do
          sleep(100)
          queue:put(i)
        end
        queue:put(nil)
      end)

      while true do
        local value = queue:get()
        if value == nil then
          break
        end
        print(value)
      end
      print("Done")
<

    Parameters: ~
    - {max_size} (`integer?`): The maximum number of items in the queue, defaults to no limit

    Returns: ~
    - (`async.Queue`) (See |async.Queue|)

------------------------------------------------------------------------------
async.semaphore({permits})                                 *async.semaphore()*

    Create an async semaphore that allows up to a given number of acquisitions.

    >lua
     async.run(function()
       local semaphore = async.semaphore(2)

       local tasks = {}

       local value = 0
       for i = 1, 10 do
         tasks|i| = async.run(function()
           semaphore:with(function()
             value = value + 1
             sleep(10)
             print(value) -- Never more than 2
             value = value - 1
           end)
         end)
       end

       async.join(tasks)
       assert(value <= 2)
     end)
<

    Parameters: ~
    - {permits} (`integer`)

    Returns: ~
    - (`async.Semaphore`) (See |async.Semaphore|)

==============================================================================
*async.Closable*
    Type: `{ close: fun(self, callback: (fun(...) -> ...)?) }

==============================================================================
*async.Event*

An event can be used to notify multiple tasks that some event has
happened. An Event object manages an internal flag that can be set to true
with the `set()` method and reset to `false` with the `clear()` method.
The `wait()` method blocks until the flag is set to `true`. The flag is
set to `false` initially.

------------------------------------------------------------------------------
async.Event:set({max_woken})                               *async.Event:set()*

    Set the event.

    All tasks waiting for event to be set will be immediately awakened.

    Parameters: ~
    - {max_woken} (`integer?`)


------------------------------------------------------------------------------
async.Event:wait()                                        *async.Event:wait()*

    Wait until the event is set.

    If the event is set, return `true` immediately. Otherwise block until
    another task calls set().

    Attributes: ~
    - `async`


------------------------------------------------------------------------------
async.Event:clear()                                      *async.Event:clear()*

    Clear (unset) the event.

    Tasks awaiting on wait() will now block until the set() method is called
    again.


==============================================================================
*async.Future*

Future objects are used to bridge low-level callback-based code with
high-level async/await code.

------------------------------------------------------------------------------
async.Future:completed()                            *async.Future:completed()*

    Return `true` if the Future is completed.

    Returns: ~
    - (`boolean`)

------------------------------------------------------------------------------
async.Future:result()                                  *async.Future:result()*

    Return the result of the Future.

    If the Future is done and has a result set by the `complete()` method, the
    result is returned.

    If the Future’s result isn’t yet available, this method raises a
    "Future has not completed" error.

    Returns: ~
    - {stat} (`boolean`)
    - {error} (`any ...`): or result

------------------------------------------------------------------------------
async.Future:wait({callback})                            *async.Future:wait()*

    Add a callback to be run when the Future is done.

    The callback is called with the arguments:
    - (`err: string`) - if the Future completed with an error.
    - (`nil`, `...:any`) - the results of the Future if it completed successfully.

    If the Future is already done when this method is called, the callback is
    called immediately with the results.

    Parameters: ~
    - {callback} (`fun(err: any, ...: any)`)


------------------------------------------------------------------------------
async.Future:complete({err}, {...})                  *async.Future:complete()*

    Mark the Future as complete and set its err or result.

    Parameters: ~
    - {err} (`string?`)
    - {...} (`any`): result


==============================================================================
*async.Queue*
------------------------------------------------------------------------------
async.Queue:size()                                        *async.Queue:size()*

    Returns the number of items in the queue

    Returns: ~
    - (`integer`)

------------------------------------------------------------------------------
async.Queue:max_size()                                *async.Queue:max_size()*

    Returns the maximum number of items in the queue

    Returns: ~
    - (`integer?`)

------------------------------------------------------------------------------
async.Queue:put({value})                                   *async.Queue:put()*

    Put a value into the queue

    Attributes: ~
    - `async`

    Parameters: ~
    - {value} (`any`)


------------------------------------------------------------------------------
async.Queue:get()                                          *async.Queue:get()*

    Get a value from the queue, blocking if the queue is empty

    Attributes: ~
    - `async`

    Returns: ~
    - (`integer?`)

------------------------------------------------------------------------------
async.Queue:get_nowait()                            *async.Queue:get_nowait()*

    Get a value from the queue, erroring if queue is empty.
    If the queue is empty, raise "Queue is empty" error.

    Returns: ~
    - (`integer?`)

------------------------------------------------------------------------------
async.Queue:put_nowait({value})                     *async.Queue:put_nowait()*

    Put an item into the queue without blocking.
    If no free slot is immediately available, raise "Queue is full" error.

    Parameters: ~
    - {value} (`any`)


==============================================================================
*async.Semaphore*

A semaphore manages an internal counter which is decremented by each
`acquire()` call and incremented by each `release()` call. The counter can
never go below zero; when `acquire()` finds that it is zero, it blocks,
waiting until some task calls `release()`.

The preferred way to use a Semaphore is with the `with()` method, which
automatically acquires and releases the semaphore around a function call.

------------------------------------------------------------------------------
async.Semaphore:with({fn})                            *async.Semaphore:with()*

    Executes the given function within the semaphore's context, ensuring
    that the semaphore's constraints are respected.

    Attributes: ~
    - `async`

    Generics: ~
    - `R`

    Parameters: ~
    - {fn} (`async fun() -> R ...`): Function to execute within the semaphore's context.

    Returns: ~
    - (`R ...`): Result(s) of the executed function.

------------------------------------------------------------------------------
async.Semaphore:acquire()                          *async.Semaphore:acquire()*

    Acquire a semaphore.

    If the internal counter is greater than zero, decrement it by `1` and
    return immediately. If it is `0`, wait until a `release()` is called.

    Attributes: ~
    - `async`


------------------------------------------------------------------------------
async.Semaphore:release()                          *async.Semaphore:release()*

    Release a semaphore.

    Increments the internal counter by `1`. Can wake
    up a task waiting to acquire the semaphore.


==============================================================================
*async.Task*

Tasks are used to run coroutines in event loops. If a coroutine needs to
wait on the event loop, the Task suspends the execution of the coroutine and
waits for event loop to restart it.

Use the high-level |async.run()| or |async.async()| functions to create Task
or Task functions respectively.

To cancel a running Task use the `close()` method. Calling it will cause the
Task to throw a "Task is closing or closed" error into the wrapped coroutine.

Note a Task can be waited on via more than one waiter.


------------------------------------------------------------------------------
async.Task:wait({callback_or_timeout})                     *async.Task:wait()*

    Add a callback to be run when the Task has completed.

    - If a timeout or `nil` is provided, the Task will synchronously wait for the
    task to complete for the given time in milliseconds.

    >lua
       local result = task:wait(10) -- wait for 10ms or else error

       local result = task:wait() -- wait indefinitely
<

    - If a function is provided, it will be called when the Task has completed
    with the arguments:
    - (`err: string`) - if the Task completed with an error.
    - (`nil`, `...:any`) - the results of the Task if it completed successfully.


    If the Task is already done when this method is called, the callback is
    called immediately with the results.

    Overloads: ~
    - `fun(timeout: integer?) -> R ...`

    Parameters: ~
    - {callback_or_timeout} (`(integer|fun(err: any, ...: R ...))?`)

    Returns: ~
    - (`any ...?`)

------------------------------------------------------------------------------
async.Task:traceback({msg})                           *async.Task:traceback()*

    Get the traceback of a task when it is not active.
    Will also get the traceback of nested tasks.

    Parameters: ~
    - {msg} (`string?`)

    Returns: ~
    - {traceback} (`string`)

------------------------------------------------------------------------------
async.Task:raise_on_error()                      *async.Task:raise_on_error()*

    If a task completes with an error, raise the error

    Returns: ~
    - {self} (`async.Task`) (See |async.Task|)

------------------------------------------------------------------------------
async.Task:close({callback})                              *async.Task:close()*

    Close the task and all of its children.
    If callback is provided it will run asynchronously,
    else it will run synchronously.

    Overloads: ~
    - `fun() -> boolean`
    - `fun(callback: fun(closed: boolean))`

    Parameters: ~
    - {callback} (`(fun(closed: boolean))?`)

    Returns: ~
    - (`any ...?`)

------------------------------------------------------------------------------
async.Task:status()                                      *async.Task:status()*

    Returns the status of tasks thread. See |coroutine.status()|.

    Returns: ~
    - (`("running"|"suspended"|"normal"|"dead")?`)

vim:tw=78:ts=8:sw=4:sts=4:et:ft=help:norl:
