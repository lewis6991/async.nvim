==============================================================================
*vim.async*

This module implements an asynchronous programming library for Neovim,
enabling developers to write non-blocking, coroutine-based code. Below is a
summary of its key features and components:

1. Async Contexts:
- Functions can run asynchronously using Lua coroutines.
- Async functions are annotated with `@async` and must run within an async context.

2. Task Management:
- Create tasks with `vim.async.run()`.
- Tasks be awaited, closed, or waited synchronously.

3. Awaiting:
- |vim.async.await()|: Allows blocking on asynchronous operations, such as
tasks or callback-based functions.
- Supports overloads for tasks, and callback functions.

4. Task Wrapping:
- |vim.async.wrap()|: Converts any callback-based functions into async functions.

5. Concurrency Utilities:
- |vim.async.iter()|: Iterates over multiple tasks, yielding their results as
they complete.
- |vim.async.await_all()|: Waits for all tasks to complete and collects their
results.
- |vim.async.await_any()|: Waits for the first task to complete and returns its
result.

6. Synchronization Primitives:
- |vim.async.event()|: Implements an event signaling mechanism for tasks to
wait and notify.
- |vim.async.queue()|: A thread-safe FIFO queue for producer-consumer patterns.
- |vim.async.semaphore()|: Limits concurrent access to shared resources.

7. Error Handling:
- Errors in async tasks are propagated and can be raised or handled explicitly.
- Provides methods like |vim.async.Task:traceback()| for debugging.

Examples:
>lua

   -- Create an async version of vim.system
   local system = vim.async.wrap(3, vim.system)

   -- Create an async-context using run
   vim.async.run(function()
     local obj_ls = system({'ls'})
     vim.async.sleep(200)
     local obj_cat = system({'cat', 'file'})
   end)
<

                                                                *async-function*

Async functions are functions that must run in an |async-context| because
they contain at least one call to `async.await()`` that yields to event
loop.

These functions can be executed directly using `async.run()` which runs the
function in an async context.

Use the `@async` annotation to mark a function as an async function.

                                                                 *async-context*

An async-context is an execution context managed by `vim.async` and is
implemented via |lua-coroutine|s. Only |async-functions| can run in an
async-context.

                                                          *async-error-handling*

Errors are handled differently depending on whether a function is called in
a blocking or non-blocking manner.

If a function is waited in a blocking call (via |async.await()| or
|async.Task:wait()| with `nil` or a timeout), errors are raised in the
calling thread.

If a function is waited in a non-blocking way (via |async.Task:wait()| with
a callback), errors are passed as part of the result in the form of `(err?,
...)`, where `err` is the error message and `...` are the results of the
function when there is no error.

To run a Task without waiting for the result while still raising
any errors, use |async.Task:raise_on_error()|.

                                                          *async-task-ownership*

Tasks are owned by the async context they are created in.

>lua
 local t1 = async.run(function() ... end)

 local main = async.run(function()
   local child = async.run(function() ... end)

   -- child created in the main async context, owned by main.
   -- Calls to `main:close()` will propagate to child.
   async.await(child)

   -- t1 created outside of the main async context.
   async.await(t1)
 end)

 main:close() -- calls `child:close()` but not `t1:close()`
<

When a parent task finishes, if finishes normally without an error, it will
await all of its children tasks before it completes. If it finishes with an
error, it close all of its children tasks.

>lua
 local main = async.run(function()
   local child1 = async.run(function() ... end)
   local child2 = async.run(function() ... end)
   -- as neither child1 or child2 are awaited, they will be closed
   -- when main finishes.
 end)
<

------------------------------------------------------------------------------
vim.async.run({...})                                         *vim.async.run()*

    Run a function in an async context, asynchronously.

    Returns an |vim.async.Task| object which can be used to wait or await the result
    of the function.

    Examples:
    >lua
     -- Run a uv function and wait for it
     local stat = vim.async.run(function()
         return vim.async.await(2, vim.uv.fs_stat, 'foo.txt')
     end):wait()

     -- Since uv functions have sync versions, this is the same as:
     local stat = vim.fs_stat('foo.txt')
<

    Generics: ~
    - `T`, `R`

    Overloads: ~
    - `fun(func: async fun(...: T ...), ...: T ...) -> Task<R ...>`
    - `fun(name: string, func: async fun(...: T ...), ...: T ...) -> Task<R ...>`
    - `fun(opts: vim.async.run.Opts, func: async fun(...: T ...), ...: T ...) -> Task<R ...>`

    Parameters: ~
    - {...} (`any`)

    Returns: ~
    - (`Task<R ...>`)

------------------------------------------------------------------------------
vim.async.await({...})                                     *vim.async.await()*

    Asynchronous blocking wait

    Example:
    >lua
     local task = vim.async.run(function()
        return 1, 'a'
     end)

     local task_fun = vim.async.async(function(arg)
        return 2, 'b', arg
     end)

     vim.async.run(function()
       do -- await a callback function
         vim.async.await(1, vim.schedule)
       end

       do -- await a callback function (if function only has a callback argument)
         vim.async.await(vim.schedule)
       end

       do -- await a task (new async context)
         local n, s = vim.async.await(task)
         assert(n == 1 and s == 'a')
       end

     end)
<

    Attributes: ~
    - `async`

    Generics: ~
    - `T`, `R`

    Overloads: ~
    - `async fun(func: fun(callback: fun(...: R ...)) -> vim.async.Closable?) -> R ...`
    - `async fun(argc: integer, func: fun(...: T ..., callback: fun(...: R ...)) -> vim.async.Closable?, ...: T ...) -> R ...`
    - `async fun(task: Task<R>) -> R ...`

    Parameters: ~
    - {...} (`any`): see overloads

    Returns: ~
    - (`any ...`)

------------------------------------------------------------------------------
vim.async.is_closing()                                *vim.async.is_closing()*

    Returns true if the current task has been closed.

    Returns: ~
    - (`boolean`)

------------------------------------------------------------------------------
vim.async.wrap({argc}, {func})                              *vim.async.wrap()*

    Creates an async function with a callback style function.

    `func` can optionally return an object with a close method to clean up
    resources. Note this method will be called when the task finishes or
    interrupted.

    Example:

    >lua
     --- Note the callback argument is not present in the return function
     --- @type async fun(timeout: integer)
     local sleep = vim.async.wrap(2, function(timeout, callback)
       local timer = vim.uv.new_timer()
       timer:start(timeout * 1000, 0, callback)
       -- uv_timer_t provides a close method so timer will be
       -- cleaned up when this function finishes
       return timer
     end)

     vim.async.run(function()
       print('hello')
       sleep(2)
       print('world')
     end)
<

    Generics: ~
    - `T`, `R`

    Parameters: ~
    - {argc} (`integer`)
    - {func} (`fun(...: T, callback: fun(...: R)) -> vim.async.Closable?`)

    Returns: ~
    - (`async fun(...: T) -> R`)

------------------------------------------------------------------------------
vim.async.iter({tasks})                                     *vim.async.iter()*

    Waits for multiple tasks to finish and iterates over their results.

    This function allows you to run multiple asynchronous tasks concurrently and
    process their results as they complete. It returns an iterator function that
    yields the index of the task, any error encountered, and the results of the
    task.

    If a task completes with an error, the error is returned as the second
    value. Otherwise, the results of the task are returned as subsequent values.

    Example:
    >lua
     local task1 = vim.async.run(function()
       return 1, 'a'
     end)

     local task2 = vim.async.run(function()
       return 2, 'b'
     end)

     local task3 = vim.async.run(function()
       error('task3 error')
     end)

     vim.async.run(function()
       for i, err, r1, r2 in vim.async.iter({task1, task2, task3}) do
         print(i, err, r1, r2)
       end
     end)
<

    Prints:
<
     1 nil 1 'a'
     2 nil 2 'b'
     3 'task3 error' nil nil
<

    Attributes: ~
    - `async`

    Generics: ~
    - `R`

    Parameters: ~
    - {tasks} (`Task<R>[]`): A list of tasks to wait for and iterate over.

    Returns: ~
    - {iterator} (`async fun() -> (integer?,any,unknown)`): that yields the index, error, and results of each task.

------------------------------------------------------------------------------
vim.async.await_all({tasks})                           *vim.async.await_all()*

    Wait for all tasks to finish and return their results.

    Example:
    >lua
     local task1 = vim.async.run(function()
       return 1, 'a'
     end)

     local task2 = vim.async.run(function()
       return 1, 'a'
     end)

     local task3 = vim.async.run(function()
       error('task3 error')
     end)

     vim.async.run(function()
       local results = vim.async.await_all({task1, task2, task3})
       print(vim.inspect(results))
     end)
<

    Prints:
<
     {
       |1| = { nil, 1, 'a' },
       |2| = { nil, 2, 'b' },
       |3| = { 'task2 error' },
     }
<

    Attributes: ~
    - `async`

    Parameters: ~
    - {tasks} (`Task<any>[]`)

    Returns: ~
    - (`table<integer,unknown>`)

------------------------------------------------------------------------------
vim.async.await_any({tasks})                           *vim.async.await_any()*
    Attributes: ~
    - `async`

    Parameters: ~
    - {tasks} (`Task<any>[]`)

    Returns: ~
    - {index} (`integer?`)
    - {err} (`any`)
    - {results} (`any ...`)

------------------------------------------------------------------------------
vim.async.sleep({duration})                                *vim.async.sleep()*
    Attributes: ~
    - `async`

    Parameters: ~
    - {duration} (`integer`): ms


------------------------------------------------------------------------------
vim.async.timeout({duration}, {task})                    *vim.async.timeout()*

    Run a task with a timeout.

    If the task does not complete within the specified duration, it is closed
    and an error is thrown.

    Attributes: ~
    - `async`

    Generics: ~
    - `R`

    Parameters: ~
    - {duration} (`integer`): Timeout duration in milliseconds
    - {task} (`Task<R>`)

    Returns: ~
    - (`R`)

------------------------------------------------------------------------------
vim.async.semaphore({permits})                         *vim.async.semaphore()*

    Create an async semaphore that allows up to a given number of acquisitions.

    >lua
     vim.async.run(function()
       local semaphore = vim.async.semaphore(2)

       local tasks = {}

       local value = 0
       for i = 1, 10 do
         tasks|i| = vim.async.run(function()
           semaphore:with(function()
             value = value + 1
             sleep(10)
             print(value) -- Never more than 2
             value = value - 1
           end)
         end)
       end

       vim.async.await_all(tasks)
       assert(value <= 2)
     end)
<

    Parameters: ~
    - {permits} (`integer?`): (default: 1)

    Returns: ~
    - (`vim.async.Semaphore`) (See |vim.async.Semaphore|)

==============================================================================
*vim.async.Closable*
------------------------------------------------------------------------------
*vim.async.Closable.close*
    Type: `fun(self, callback: (fun(...) -> ...)?)


==============================================================================
*vim.async.Event*

An event can be used to notify multiple tasks that some event has
happened. An Event object manages an internal flag that can be set to true
with the `set()` method and reset to `false` with the `clear()` method.
The `wait()` method blocks until the flag is set to `true`. The flag is
set to `false` initially.

------------------------------------------------------------------------------
vim.async.Event:set({max_woken})                       *vim.async.Event:set()*

    Set the event.

    All tasks waiting for event to be set will be immediately awakened.

    Parameters: ~
    - {max_woken} (`integer?`)


------------------------------------------------------------------------------
vim.async.Event:wait()                                *vim.async.Event:wait()*

    Wait until the event is set.

    If the event is set, return `true` immediately. Otherwise block until
    another task calls set().

    Attributes: ~
    - `async`


------------------------------------------------------------------------------
vim.async.Event:clear()                              *vim.async.Event:clear()*

    Clear (unset) the event.

    Tasks awaiting on wait() will now block until the set() method is called
    again.


==============================================================================
*vim.async.Future*

Future objects are used to bridge low-level callback-based code with
high-level async/await code.

------------------------------------------------------------------------------
vim.async.Future:completed()                    *vim.async.Future:completed()*

    Return `true` if the Future is completed.

    Returns: ~
    - (`boolean`)

------------------------------------------------------------------------------
vim.async.Future:result()                          *vim.async.Future:result()*

    Return the result of the Future.

    If the Future is done and has a result set by the `complete()` method, the
    result is returned.

    If the Future’s result isn’t yet available, this method raises a
    "Future has not completed" error.

    Returns: ~
    - {stat} (`boolean`)
    - {error} (`any ...`): or result

------------------------------------------------------------------------------
vim.async.Future:wait({callback})                    *vim.async.Future:wait()*

    Add a callback to be run when the Future is done.

    The callback is called with the arguments:
    - (`err: string`) - if the Future completed with an error.
    - (`nil`, `...:any`) - the results of the Future if it completed successfully.

    If the Future is already done when this method is called, the callback is
    called immediately with the results.

    Parameters: ~
    - {callback} (`fun(err: any, ...: any)`)


------------------------------------------------------------------------------
vim.async.Future:complete({err}, {...})          *vim.async.Future:complete()*

    Mark the Future as complete and set its err or result.

    Parameters: ~
    - {err} (`any`)
    - {...} (`any`): result


==============================================================================
*vim.async.Queue*
------------------------------------------------------------------------------
vim.async.Queue:size()                                *vim.async.Queue:size()*

    Returns the number of items in the queue

    Returns: ~
    - (`integer`)

------------------------------------------------------------------------------
vim.async.Queue:max_size()                        *vim.async.Queue:max_size()*

    Returns the maximum number of items in the queue

    Returns: ~
    - (`integer?`)

------------------------------------------------------------------------------
vim.async.Queue:put({value})                           *vim.async.Queue:put()*

    Put a value into the queue

    Attributes: ~
    - `async`

    Parameters: ~
    - {value} (`any`)


------------------------------------------------------------------------------
vim.async.Queue:get()                                  *vim.async.Queue:get()*

    Get a value from the queue, blocking if the queue is empty

    Attributes: ~
    - `async`

    Returns: ~
    - (`R?`)

------------------------------------------------------------------------------
vim.async.Queue:get_nowait()                    *vim.async.Queue:get_nowait()*

    Get a value from the queue, erroring if queue is empty.
    If the queue is empty, raise "Queue is empty" error.

    Returns: ~
    - (`R?`)

------------------------------------------------------------------------------
vim.async.Queue:put_nowait({value})             *vim.async.Queue:put_nowait()*

    Put an item into the queue without blocking.
    If no free slot is immediately available, raise "Queue is full" error.

    Parameters: ~
    - {value} (`any`)


==============================================================================
*vim.async.Semaphore*

A semaphore manages an internal counter which is decremented by each
`acquire()` call and incremented by each `release()` call. The counter can
never go below zero; when `acquire()` finds that it is zero, it blocks,
waiting until some task calls `release()`.

The preferred way to use a Semaphore is with the `with()` method, which
automatically acquires and releases the semaphore around a function call.

------------------------------------------------------------------------------
vim.async.Semaphore:with({fn})                    *vim.async.Semaphore:with()*

    Executes the given function within the semaphore's context, ensuring
    that the semaphore's constraints are respected.

    Attributes: ~
    - `async`

    Generics: ~
    - `R`

    Parameters: ~
    - {fn} (`async fun() -> R ...`): Function to execute within the semaphore's context.

    Returns: ~
    - (`R ...`): Result(s) of the executed function.

------------------------------------------------------------------------------
vim.async.Semaphore:acquire()                  *vim.async.Semaphore:acquire()*

    Acquire a semaphore.

    If the internal counter is greater than zero, decrement it by `1` and
    return immediately. If it is `0`, wait until a `release()` is called.

    Attributes: ~
    - `async`


------------------------------------------------------------------------------
vim.async.Semaphore:release()                  *vim.async.Semaphore:release()*

    Release a semaphore.

    Increments the internal counter by `1`. Can wake
    up a task waiting to acquire the semaphore.


==============================================================================
*vim.async.Task*

Tasks are used to run coroutines in event loops. If a coroutine needs to
wait on the event loop, the Task suspends the execution of the coroutine and
waits for event loop to restart it.

Use the |vim.async.run()| to create Tasks.

To close a running Task use the `close()` method. Calling it will cause the
Task to throw a "closed" error in the wrapped coroutine.

Note a Task can be waited on via more than one waiter.

------------------------------------------------------------------------------
*vim.async.Task.name*
    Type: `string?


    Mark task for internal use. Used for awaiting children tasks on complete.


------------------------------------------------------------------------------
vim.async.Task:completed()                        *vim.async.Task:completed()*

    Returns whether the Task has completed.

    Returns: ~
    - (`boolean`)

------------------------------------------------------------------------------
vim.async.Task:wait({callback_or_timeout})             *vim.async.Task:wait()*

    Add a callback to be run when the Task has completed.

    - If a timeout or `nil` is provided, the Task will synchronously wait for the
    task to complete for the given time in milliseconds.

    >lua
       local result = task:wait(10) -- wait for 10ms or else error

       local result = task:wait() -- wait indefinitely
<

    - If a function is provided, it will be called when the Task has completed
    with the arguments:
    - (`err: string`) - if the Task completed with an error.
    - (`nil`, `...:any`) - the results of the Task if it completed successfully.


    If the Task is already done when this method is called, the callback is
    called immediately with the results.

    Overloads: ~
    - `fun(timeout: integer?) -> R ...`

    Parameters: ~
    - {callback_or_timeout} (`(integer|fun(err: any, ...: R ...))?`)

    Returns: ~
    - (`any ...?`)

------------------------------------------------------------------------------
vim.async.Task:pwait({timeout})                       *vim.async.Task:pwait()*
    Parameters: ~
    - {timeout} (`integer?`)

    Returns: ~
    - (`boolean`)
    - (`R ...`)

------------------------------------------------------------------------------
vim.async.Task:detach()                              *vim.async.Task:detach()*
    Returns: ~
    - (`vim.async.Task`) (See |vim.async.Task|)

------------------------------------------------------------------------------
vim.async.Task:traceback({msg}, {level})          *vim.async.Task:traceback()*

    Get the traceback of a task when it is not active.
    Will also get the traceback of nested tasks.

    Parameters: ~
    - {msg} (`string?`)
    - {level} (`integer?`)

    Returns: ~
    - {traceback} (`string`)

------------------------------------------------------------------------------
vim.async.Task:raise_on_error()              *vim.async.Task:raise_on_error()*

    If a task completes with an error, raise the error

    Returns: ~
    - {self} (`vim.async.Task`) (See |vim.async.Task|)

------------------------------------------------------------------------------
vim.async.Task:close({callback})                      *vim.async.Task:close()*

    Close the task and all of its children.
    If callback is provided it will run asynchronously,
    else it will run synchronously.

    Parameters: ~
    - {callback} (`(fun())?`)


------------------------------------------------------------------------------
vim.async.Task:status()                              *vim.async.Task:status()*

    Returns the status of the task:
    - 'running'    : task is running (that is, is called `status()`).
    - 'normal'     : task is active but not running (e.g. it is starting
    another task).
    - 'awaiting'   : if the task is awaiting another task either directly via
    `await()` or waiting for all children to complete.
    - 'completed'  : task and all it's children have completed

    Returns: ~
    - (`("running"|"awaiting"|"normal"|"scheduled"|"completed")`)

==============================================================================
*vim.async.run.Opts*
------------------------------------------------------------------------------
*vim.async.run.Opts.name*
    Type: `string?


------------------------------------------------------------------------------
*vim.async.run.Opts.detached*
    Type: `boolean?


vim:tw=78:ts=8:sw=4:sts=4:et:ft=help:norl:
